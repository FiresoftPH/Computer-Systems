// megafunction wizard: %LPM_CLSHIFT%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: lpm_clshift 

// ============================================================
// File Name: lpm_clshift0.v
// Megafunction Name(s):
// 			lpm_clshift
//
// Simulation Library Files(s):
// 			
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 9.1 Build 350 03/24/2010 SP 2 SJ Web Edition
// ************************************************************


//Copyright (C) 1991-2010 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//lpm_clshift LPM_SHIFTTYPE="ARITHMETIC" LPM_WIDTH=4 LPM_WIDTHDIST=2 data direction distance overflow result underflow
//VERSION_BEGIN 9.1SP2 cbx_lpm_clshift 2010:03:24:20:43:43:SJ cbx_mgl 2010:03:24:21:01:05:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463


//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  lpm_clshift0_lpm_clshift
	( 
	data,
	direction,
	distance,
	overflow,
	result,
	underflow) /* synthesis synthesis_clearbox=1 */;
	input   [3:0]  data;
	input   direction;
	input   [1:0]  distance;
	output   overflow;
	output   [3:0]  result;
	output   underflow;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   direction;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]  direction_w;
	wire  [4:0]  inz_w;
	wire  [3:0]  ov_w;
	wire  [1:0]  pad_left_w;
	wire  [1:0]  pad_right_w0;
	wire  [2:0]  pad_right_w1;
	wire  [11:0]  sbit_w;
	wire  [4:0]  uf_w;

	assign
		direction_w = {direction},
		inz_w = {1'b0, ((data[3] ^ data[3]) | inz_w[4]), ((data[3] ^ data[2]) | inz_w[3]), ((data[3] ^ data[1]) | inz_w[2]), ((data[3] ^ data[0]) | inz_w[1])},
		ov_w = {((distance[1] & (sbit_w[7] ^ sbit_w[5])) | ov_w[2]), ((distance[1] & (sbit_w[7] ^ sbit_w[6])) | ov_w[1]), ((distance[0] & (sbit_w[3] ^ sbit_w[2])) | ov_w[0]), 1'b0},
		overflow = (ov_w[3] & (~ direction_w[0])),
		pad_left_w = {2{1'b0}},
		pad_right_w0 = {2{sbit_w[3]}},
		pad_right_w1 = {3{sbit_w[7]}},
		result = sbit_w[11:8],
		sbit_w = {((({4{(distance[1] & (~ direction_w))}} & {sbit_w[5:4], pad_left_w[1:0]}) | ({4{(distance[1] & direction_w)}} & {pad_right_w1[1:0], sbit_w[7:6]})) | ({4{(~ distance[1])}} & sbit_w[7:4])), ((({4{(distance[0] & (~ direction_w))}} & {sbit_w[2:0], pad_left_w[0]}) | ({4{(distance[0] & direction_w)}} & {pad_right_w0[0], sbit_w[3:1]})) | ({4{(~ distance[0])}} & sbit_w[3:0])), data},
		uf_w = {1'b0, ((data[3] ^ sbit_w[11]) | uf_w[4]), ((data[3] ^ sbit_w[10]) | uf_w[3]), ((data[3] ^ sbit_w[9]) | uf_w[2]), ((data[3] ^ sbit_w[8]) | uf_w[1])},
		underflow = ((direction_w[0] & (~ uf_w[0])) & inz_w[0]);
endmodule //lpm_clshift0_lpm_clshift
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module lpm_clshift0 (
	data,
	distance,
	overflow,
	result,
	underflow)/* synthesis synthesis_clearbox = 1 */;

	input	[3:0]  data;
	input	[1:0]  distance;
	output	  overflow;
	output	[3:0]  result;
	output	  underflow;

	wire  sub_wire0;
	wire  sub_wire1;
	wire [3:0] sub_wire2;
	wire  sub_wire3 = 1'h0;
	wire  overflow = sub_wire0;
	wire  underflow = sub_wire1;
	wire [3:0] result = sub_wire2[3:0];

	lpm_clshift0_lpm_clshift	lpm_clshift0_lpm_clshift_component (
				.distance (distance),
				.direction (sub_wire3),
				.data (data),
				.overflow (sub_wire0),
				.underflow (sub_wire1),
				.result (sub_wire2));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone II"
// Retrieval info: PRIVATE: LPM_SHIFTTYPE NUMERIC "1"
// Retrieval info: PRIVATE: LPM_WIDTH NUMERIC "4"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: lpm_width_varies NUMERIC "0"
// Retrieval info: PRIVATE: lpm_widthdist NUMERIC "2"
// Retrieval info: PRIVATE: lpm_widthdist_style NUMERIC "0"
// Retrieval info: PRIVATE: port_direction NUMERIC "0"
// Retrieval info: CONSTANT: LPM_SHIFTTYPE STRING "ARITHMETIC"
// Retrieval info: CONSTANT: LPM_TYPE STRING "LPM_CLSHIFT"
// Retrieval info: CONSTANT: LPM_WIDTH NUMERIC "4"
// Retrieval info: CONSTANT: LPM_WIDTHDIST NUMERIC "2"
// Retrieval info: USED_PORT: data 0 0 4 0 INPUT NODEFVAL data[3..0]
// Retrieval info: USED_PORT: distance 0 0 2 0 INPUT NODEFVAL distance[1..0]
// Retrieval info: USED_PORT: overflow 0 0 0 0 OUTPUT NODEFVAL overflow
// Retrieval info: USED_PORT: result 0 0 4 0 OUTPUT NODEFVAL result[3..0]
// Retrieval info: USED_PORT: underflow 0 0 0 0 OUTPUT NODEFVAL underflow
// Retrieval info: CONNECT: @distance 0 0 2 0 distance 0 0 2 0
// Retrieval info: CONNECT: @data 0 0 4 0 data 0 0 4 0
// Retrieval info: CONNECT: result 0 0 4 0 @result 0 0 4 0
// Retrieval info: CONNECT: @direction 0 0 0 0 GND 0 0 0 0
// Retrieval info: CONNECT: overflow 0 0 0 0 @overflow 0 0 0 0
// Retrieval info: CONNECT: underflow 0 0 0 0 @underflow 0 0 0 0
// Retrieval info: LIBRARY: lpm lpm.lpm_components.all
// Retrieval info: GEN_FILE: TYPE_NORMAL lpm_clshift0.vhd TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL lpm_clshift0.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL lpm_clshift0.cmp TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL lpm_clshift0.bsf TRUE FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL lpm_clshift0_inst.vhd FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL lpm_clshift0_syn.v TRUE
